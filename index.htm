<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title id="title"></title>
    <style>
        .weatherPanel {
            border-radius: 10px;
            background-color: #f0f0f0;
            padding: 20px;
            padding-top: 1px;
            margin-top: 20px;
            margin-bottom: 20px;
            font-family: Arial, sans-serif;
            color: #333;
            box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.1);
            position: relative;
            line-height: 22px;
            min-height: 50px;
        }
        .weatherIcon {
            position: absolute;
            top: 10px;
            right: 10px;
            border-radius: 50%;
            background-color: white;
            padding: 10px;
        }
        h1, h2, h3 {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #555;
        }
        label {
            font-family: Arial, Tahoma, Geneva, Verdana, sans-serif;
            font-weight: bold;
            color: #666;
            width: 8em;
            display: inline-block; 
        }
        .dateLabel {
            font-weight: bold;
            color: #007bff;
            margin-right: 10px;
        }
        button {
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            cursor: pointer;
            font-family: Arial, sans-serif;
            font-weight: bold;
        }
        button:hover {
            background-color: #0056b3;
        }
        input[type="datetime-local"] {
            padding: 6px;
            font-family: Arial, sans-serif;
            font-size: 14px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #f9f9f9;
            width: 200px;
            height: 30px;
        }
    </style>
</head>
<body>
    <h1 id="appTitle"></h1> 

    <div id="panelContainer"></div>

    <p>
        <button onclick="checkWeather()">
            <span id="checkWeatherButton"></span>
        </button>
    </p>

    <div id="weatherContainer" style="display: none;"></div>

    <script>
        const panelData = {
            "panels": [
                {
                    "id": "morning",
                    "label": "Morning",
                    "dayOffset": 1,
                    "time": "10:00",
                    "showRainProbability": true,
                    "showWindSpeed": true,
                    "showDescription": true,
                    "showIcon": true
                },
                {
                    "id": "afternoon",
                    "label": "Afternoon",
                    "dayOffset": 1,
                    "time": "19:00",
                    "showRainProbability": true,
                    "showWindSpeed": false,
                    "showDescription": true,
                    "showIcon": true
                },
                {
                    "id": "evening",
                    "label": "Evening",
                    "dayOffset": 2,
                    "time": "21:00",
                    "showRainProbability": false,
                    "showWindSpeed": true,
                    "showDescription": true, 
                    "showIcon": true
                }
            ]
        };

        function translate(key) {
            const language = 'de';
            const translations = {
                "app_title": {"en": "Weather App", "de": "Wetter App"},
                "check_weather_button": {"en": "Weather forecast", "de": "Wetter vorhersagen"},
                "error_message": {"en": "Error fetching weather data.", "de": "Fehler beim Abrufen der Wetterdaten."},
                "morning": {"en": "Morning", "de": "Morgen"},
                "afternoon": {"en": "Afternoon", "de": "Nachmittag"},
                "evening": {"en": "Evening", "de": "Abend"},
                "description": {"en": "Description", "de": "Beschreibung"},
                "rain_probability": {"en": "Rain Probability", "de": "Regenwahrscheinlichkeit"},
                "temperature": {"en": "Temperature", "de": "Temperatur"},
                "wind_speed": {"en": "Wind Speed", "de": "Windgeschwindigkeit"}
            };
            return translations[key] ? translations[key][language] : key;
        }

        function setDefaultTimes() {
            const panelContainer = document.getElementById('panelContainer');

            panelData.panels.forEach(panel => {
                const now = new Date();
                const targetDate = new Date(now);
                targetDate.setDate(now.getDate() + panel.dayOffset);

                const [hours, minutes] = panel.time.split(':');
                targetDate.setHours(hours, minutes);

                const panelDiv = document.createElement('div');
                panelDiv.classList.add('weatherPanel');
                panelDiv.innerHTML = `
                    <p>
                        <label for="${panel.id}Time" class="dateLabel">${translate(panel.id.toLowerCase())}</label>
                        <input type="datetime-local" id="${panel.id}Time" max="2030-12-31T23:59" value="${targetDate.toISOString().slice(0, 16)}">
                    </p>
                `;
                panelContainer.appendChild(panelDiv);
            });

            document.getElementById('checkWeatherButton').innerText = translate('check_weather_button');
        }

        setDefaultTimes();

        function checkWeather() {
            fetch('get-forecast.php')
                .then(response => response.json())
                .then(weatherData => {
                    const weatherContainer = document.getElementById('weatherContainer');
                    weatherContainer.innerHTML = '';

                    panelData.panels.forEach(panel => {
                        const panelTime = new Date(document.getElementById(`${panel.id}Time`).value);
                        const panelData = getWeatherDataForTime(weatherData, panelTime);

                        const panelDiv = document.createElement('div');
                        panelDiv.classList.add('weatherPanel');
                        panelDiv.innerHTML = `
                            <h2>${translate(panel.id.toLowerCase())}</h2>
                            ${panel.showIcon ? `<img class="weatherIcon" src="https://openweathermap.org/img/wn/${panelData.weather[0].icon}@2x.png" alt="Weather Icon">` : ''}
                            ${panel.showDescription ? `<p>${translate('description')}: ${panelData.weather[0].description}</p>` : ''}
                            ${panel.showRainProbability ? `<p>${translate('rain_probability')}: ${panelData.pop * 100}%</p>` : ''}
                            <p>${translate('temperature')}: ${convertKelvinToCelsius(panelData.main.temp)} Â°C</p>
                            ${panel.showWindSpeed ? `<p>${translate('wind_speed')}: ${panelData.wind.speed} m/s</p>` : ''}
                        `;
                        weatherContainer.appendChild(panelDiv);
                    });

                    weatherContainer.style.display = 'block';
                })
                .catch(error => {
                    console.error('Error fetching weather data:', error);
                    const weatherContainer = document.getElementById('weatherContainer');
                    weatherContainer.innerHTML = `<div class="weatherPanel">${translate('error_message')}</div>`;
                    weatherContainer.style.display = 'block';
                });
        }

        function getWeatherDataForTime(data, time) {
            const closestData = data.list.reduce((closest, current) => {
                const currentTime = new Date(current.dt_txt);
                const timeDiff = Math.abs(currentTime - time);

                return timeDiff < closest.timeDiff ? { data: current, timeDiff: timeDiff } : closest;
            }, { data: null, timeDiff: Infinity });

            return closestData.data;
        }

        function convertKelvinToCelsius(kelvin) {
            return (kelvin - 273.15).toFixed(2);
        }

        document.getElementById('title').innerText = translate('app_title');
        document.getElementById('appTitle').innerText = translate('app_title');
    </script>
</body>
</html>
